// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ssigmaapi/markethub/v1/markethub.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ssigmaapi.Markethub.V1 {

  /// <summary>Holder for reflection information generated from ssigmaapi/markethub/v1/markethub.proto</summary>
  public static partial class MarkethubReflection {

    #region Descriptor
    /// <summary>File descriptor for ssigmaapi/markethub/v1/markethub.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarkethubReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZzc2lnbWFhcGkvbWFya2V0aHViL3YxL21hcmtldGh1Yi5wcm90bxIWc3Np",
            "Z21hYXBpLm1hcmtldGh1Yi52MRobc3NpZ21hYXBpL3R5cGUvbWFya2V0LnBy",
            "b3RvGhpzc2lnbWFhcGkvdHlwZS90cmFkZS5wcm90bxoec3NpZ21hYXBpL3R5",
            "cGUvb3JkZXJib29rLnByb3RvGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnBy",
            "b3RvIp4BChBHZXRUcmFkZXNSZXF1ZXN0EicKB21hcmtldHMYASADKAsyFi5z",
            "c2lnbWFhcGkudHlwZS5NYXJrZXQSHwoXdmVsb2NpdHlfd2luZG93aW5nX3Np",
            "emUYAiABKAMSIQoZdm9sYXRpbGl0eV93aW5kb3dpbmdfc2l6ZRgDIAEoAxId",
            "ChV2b2x1bWVfd2luZG93aW5nX3NpemUYBCABKAMimgEKEUdldFRyYWRlc1Jl",
            "c3BvbnNlEkQKEnRyYWRlc193aXRoX21hcmtldBgBIAMoCzIoLnNzaWdtYWFw",
            "aS5tYXJrZXRodWIudjEuVHJhZGVzV2l0aE1hcmtldBI/Cg9leGNoYW5nZV9z",
            "dGF0dXMYAiADKAsyJi5zc2lnbWFhcGkubWFya2V0aHViLnYxLkV4Y2hhbmdl",
            "U3RhdHVzIj4KFEdldE9yZGVyQm9va3NSZXF1ZXN0EiYKBm1hcmtldBgBIAMo",
            "CzIWLnNzaWdtYWFwaS50eXBlLk1hcmtldCKTAQoVR2V0T3JkZXJCb29rc1Jl",
            "c3BvbnNlEiYKA2FsbBgBIAMoCzIZLnNzaWdtYWFwaS50eXBlLk9yZGVyQm9v",
            "axIRCgl0aW1lc3RhbXAYAiABKAMSPwoPZXhjaGFuZ2Vfc3RhdHVzGAMgAygL",
            "MiYuc3NpZ21hYXBpLm1hcmtldGh1Yi52MS5FeGNoYW5nZVN0YXR1cyKjAQod",
            "R2V0VHJhZGVzQW5kT3JkZXJCb29rc1JlcXVlc3QSPAoKdHJhZGVzX3JlcRgB",
            "IAEoCzIoLnNzaWdtYWFwaS5tYXJrZXRodWIudjEuR2V0VHJhZGVzUmVxdWVz",
            "dBJECg5vcmRlcmJvb2tzX3JlcRgCIAEoCzIsLnNzaWdtYWFwaS5tYXJrZXRo",
            "dWIudjEuR2V0T3JkZXJCb29rc1JlcXVlc3Qi5wEKHkdldFRyYWRlc0FuZE9y",
            "ZGVyQm9va3NSZXNwb25zZRI9Cgp0cmFkZXNfcmVzGAEgASgLMikuc3NpZ21h",
            "YXBpLm1hcmtldGh1Yi52MS5HZXRUcmFkZXNSZXNwb25zZRJFCg5vcmRlcmJv",
            "b2tzX3JlcxgCIAEoCzItLnNzaWdtYWFwaS5tYXJrZXRodWIudjEuR2V0T3Jk",
            "ZXJCb29rc1Jlc3BvbnNlEj8KD2V4Y2hhbmdlX3N0YXR1cxgDIAMoCzImLnNz",
            "aWdtYWFwaS5tYXJrZXRodWIudjEuRXhjaGFuZ2VTdGF0dXMioAIKF1RyYWRl",
            "V2l0aEFkZGl0aW9uYWxJbmZvEiQKBXRyYWRlGAEgASgLMhUuc3NpZ21hYXBp",
            "LnR5cGUuVHJhZGUSEAoIdmVsb2NpdHkYAiABKAESFAoMYWNjZWxlcmF0aW9u",
            "GAMgASgBEhIKCnZvbGF0aWxpdHkYBCABKAESEwoLdm9sdW1lX2Jhc2UYBSAB",
            "KAESFAoMdm9sdW1lX3F1b3RlGAYgASgBEhUKDW1vbWVudHVtX3JhdGUYByAB",
            "KAESHwoXdmVsb2NpdHlfd2luZG93aW5nX3NpemUYCCABKAMSIQoZdm9sYXRp",
            "bGl0eV93aW5kb3dpbmdfc2l6ZRgJIAEoAxIdChV2b2x1bWVfd2luZG93aW5n",
            "X3NpemUYCiABKAMiewoQVHJhZGVzV2l0aE1hcmtldBImCgZtYXJrZXQYASAB",
            "KAsyFi5zc2lnbWFhcGkudHlwZS5NYXJrZXQSPwoGdHJhZGVzGAIgAygLMi8u",
            "c3NpZ21hYXBpLm1hcmtldGh1Yi52MS5UcmFkZVdpdGhBZGRpdGlvbmFsSW5m",
            "byIwCg5FeGNoYW5nZVN0YXR1cxIQCghleGNoYW5nZRgBIAEoCRIMCgRvcGVu",
            "GAIgASgIMssEChJNYXJrZXRIdWJTZXJ2aWNlVjES1gEKCUdldFRyYWRlcxIo",
            "LnNzaWdtYWFwaS5tYXJrZXRodWIudjEuR2V0VHJhZGVzUmVxdWVzdBopLnNz",
            "aWdtYWFwaS5tYXJrZXRodWIudjEuR2V0VHJhZGVzUmVzcG9uc2UicoLT5JMC",
            "bCJnL3YxL21hcmtldC1odWIvZ2V0LXRyYWRlcy97dmVsb2NpdHlfd2luZG93",
            "aW5nX3NpemV9L3t2b2xhdGlsaXR5X3dpbmRvd2luZ19zaXplfS97dm9sdW1l",
            "X3dpbmRvd2luZ19zaXplfToBKjABEpkBCg1HZXRPcmRlckJvb2tzEiwuc3Np",
            "Z21hYXBpLm1hcmtldGh1Yi52MS5HZXRPcmRlckJvb2tzUmVxdWVzdBotLnNz",
            "aWdtYWFwaS5tYXJrZXRodWIudjEuR2V0T3JkZXJCb29rc1Jlc3BvbnNlIimC",
            "0+STAiMiHi92MS9tYXJrZXQtaHViL2dldC1vcmRlci1ib29rczoBKjABEr8B",
            "ChZHZXRUcmFkZXNBbmRPcmRlckJvb2tzEjUuc3NpZ21hYXBpLm1hcmtldGh1",
            "Yi52MS5HZXRUcmFkZXNBbmRPcmRlckJvb2tzUmVxdWVzdBo2LnNzaWdtYWFw",
            "aS5tYXJrZXRodWIudjEuR2V0VHJhZGVzQW5kT3JkZXJCb29rc1Jlc3BvbnNl",
            "IjSC0+STAi4iKS92MS9tYXJrZXQtaHViL2dldC10cmFkZXMtYW5kLW9yZGVy",
            "LWJvb2tzOgEqMAFCNlo0Z2l0aHViLmNvbS9rYWl0bzIvc3NpZ21hYXBpZ28v",
            "bWFya2V0aHViL3YxO21hcmtldGh1YmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ssigmaapi.Type.MarketReflection.Descriptor, global::Ssigmaapi.Type.TradeReflection.Descriptor, global::Ssigmaapi.Type.OrderbookReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.GetTradesRequest), global::Ssigmaapi.Markethub.V1.GetTradesRequest.Parser, new[]{ "Markets", "VelocityWindowingSize", "VolatilityWindowingSize", "VolumeWindowingSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.GetTradesResponse), global::Ssigmaapi.Markethub.V1.GetTradesResponse.Parser, new[]{ "TradesWithMarket", "ExchangeStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.GetOrderBooksRequest), global::Ssigmaapi.Markethub.V1.GetOrderBooksRequest.Parser, new[]{ "Market" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.GetOrderBooksResponse), global::Ssigmaapi.Markethub.V1.GetOrderBooksResponse.Parser, new[]{ "All", "Timestamp", "ExchangeStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.GetTradesAndOrderBooksRequest), global::Ssigmaapi.Markethub.V1.GetTradesAndOrderBooksRequest.Parser, new[]{ "TradesReq", "OrderbooksReq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.GetTradesAndOrderBooksResponse), global::Ssigmaapi.Markethub.V1.GetTradesAndOrderBooksResponse.Parser, new[]{ "TradesRes", "OrderbooksRes", "ExchangeStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.TradeWithAdditionalInfo), global::Ssigmaapi.Markethub.V1.TradeWithAdditionalInfo.Parser, new[]{ "Trade", "Velocity", "Acceleration", "Volatility", "VolumeBase", "VolumeQuote", "MomentumRate", "VelocityWindowingSize", "VolatilityWindowingSize", "VolumeWindowingSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.TradesWithMarket), global::Ssigmaapi.Markethub.V1.TradesWithMarket.Parser, new[]{ "Market", "Trades" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Markethub.V1.ExchangeStatus), global::Ssigmaapi.Markethub.V1.ExchangeStatus.Parser, new[]{ "Exchange", "Open" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetTradesRequest : pb::IMessage<GetTradesRequest> {
    private static readonly pb::MessageParser<GetTradesRequest> _parser = new pb::MessageParser<GetTradesRequest>(() => new GetTradesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTradesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesRequest(GetTradesRequest other) : this() {
      markets_ = other.markets_.Clone();
      velocityWindowingSize_ = other.velocityWindowingSize_;
      volatilityWindowingSize_ = other.volatilityWindowingSize_;
      volumeWindowingSize_ = other.volumeWindowingSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesRequest Clone() {
      return new GetTradesRequest(this);
    }

    /// <summary>Field number for the "markets" field.</summary>
    public const int MarketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Type.Market> _repeated_markets_codec
        = pb::FieldCodec.ForMessage(10, global::Ssigmaapi.Type.Market.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Type.Market> markets_ = new pbc::RepeatedField<global::Ssigmaapi.Type.Market>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Type.Market> Markets {
      get { return markets_; }
    }

    /// <summary>Field number for the "velocity_windowing_size" field.</summary>
    public const int VelocityWindowingSizeFieldNumber = 2;
    private long velocityWindowingSize_;
    /// <summary>
    /// unit is seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VelocityWindowingSize {
      get { return velocityWindowingSize_; }
      set {
        velocityWindowingSize_ = value;
      }
    }

    /// <summary>Field number for the "volatility_windowing_size" field.</summary>
    public const int VolatilityWindowingSizeFieldNumber = 3;
    private long volatilityWindowingSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VolatilityWindowingSize {
      get { return volatilityWindowingSize_; }
      set {
        volatilityWindowingSize_ = value;
      }
    }

    /// <summary>Field number for the "volume_windowing_size" field.</summary>
    public const int VolumeWindowingSizeFieldNumber = 4;
    private long volumeWindowingSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VolumeWindowingSize {
      get { return volumeWindowingSize_; }
      set {
        volumeWindowingSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTradesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTradesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!markets_.Equals(other.markets_)) return false;
      if (VelocityWindowingSize != other.VelocityWindowingSize) return false;
      if (VolatilityWindowingSize != other.VolatilityWindowingSize) return false;
      if (VolumeWindowingSize != other.VolumeWindowingSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= markets_.GetHashCode();
      if (VelocityWindowingSize != 0L) hash ^= VelocityWindowingSize.GetHashCode();
      if (VolatilityWindowingSize != 0L) hash ^= VolatilityWindowingSize.GetHashCode();
      if (VolumeWindowingSize != 0L) hash ^= VolumeWindowingSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      markets_.WriteTo(output, _repeated_markets_codec);
      if (VelocityWindowingSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VelocityWindowingSize);
      }
      if (VolatilityWindowingSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(VolatilityWindowingSize);
      }
      if (VolumeWindowingSize != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(VolumeWindowingSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += markets_.CalculateSize(_repeated_markets_codec);
      if (VelocityWindowingSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VelocityWindowingSize);
      }
      if (VolatilityWindowingSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VolatilityWindowingSize);
      }
      if (VolumeWindowingSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VolumeWindowingSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTradesRequest other) {
      if (other == null) {
        return;
      }
      markets_.Add(other.markets_);
      if (other.VelocityWindowingSize != 0L) {
        VelocityWindowingSize = other.VelocityWindowingSize;
      }
      if (other.VolatilityWindowingSize != 0L) {
        VolatilityWindowingSize = other.VolatilityWindowingSize;
      }
      if (other.VolumeWindowingSize != 0L) {
        VolumeWindowingSize = other.VolumeWindowingSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            markets_.AddEntriesFrom(input, _repeated_markets_codec);
            break;
          }
          case 16: {
            VelocityWindowingSize = input.ReadInt64();
            break;
          }
          case 24: {
            VolatilityWindowingSize = input.ReadInt64();
            break;
          }
          case 32: {
            VolumeWindowingSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTradesResponse : pb::IMessage<GetTradesResponse> {
    private static readonly pb::MessageParser<GetTradesResponse> _parser = new pb::MessageParser<GetTradesResponse>(() => new GetTradesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTradesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesResponse(GetTradesResponse other) : this() {
      tradesWithMarket_ = other.tradesWithMarket_.Clone();
      exchangeStatus_ = other.exchangeStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesResponse Clone() {
      return new GetTradesResponse(this);
    }

    /// <summary>Field number for the "trades_with_market" field.</summary>
    public const int TradesWithMarketFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Markethub.V1.TradesWithMarket> _repeated_tradesWithMarket_codec
        = pb::FieldCodec.ForMessage(10, global::Ssigmaapi.Markethub.V1.TradesWithMarket.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.TradesWithMarket> tradesWithMarket_ = new pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.TradesWithMarket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.TradesWithMarket> TradesWithMarket {
      get { return tradesWithMarket_; }
    }

    /// <summary>Field number for the "exchange_status" field.</summary>
    public const int ExchangeStatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Markethub.V1.ExchangeStatus> _repeated_exchangeStatus_codec
        = pb::FieldCodec.ForMessage(18, global::Ssigmaapi.Markethub.V1.ExchangeStatus.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus> exchangeStatus_ = new pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus> ExchangeStatus {
      get { return exchangeStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTradesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTradesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tradesWithMarket_.Equals(other.tradesWithMarket_)) return false;
      if(!exchangeStatus_.Equals(other.exchangeStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tradesWithMarket_.GetHashCode();
      hash ^= exchangeStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tradesWithMarket_.WriteTo(output, _repeated_tradesWithMarket_codec);
      exchangeStatus_.WriteTo(output, _repeated_exchangeStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tradesWithMarket_.CalculateSize(_repeated_tradesWithMarket_codec);
      size += exchangeStatus_.CalculateSize(_repeated_exchangeStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTradesResponse other) {
      if (other == null) {
        return;
      }
      tradesWithMarket_.Add(other.tradesWithMarket_);
      exchangeStatus_.Add(other.exchangeStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tradesWithMarket_.AddEntriesFrom(input, _repeated_tradesWithMarket_codec);
            break;
          }
          case 18: {
            exchangeStatus_.AddEntriesFrom(input, _repeated_exchangeStatus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOrderBooksRequest : pb::IMessage<GetOrderBooksRequest> {
    private static readonly pb::MessageParser<GetOrderBooksRequest> _parser = new pb::MessageParser<GetOrderBooksRequest>(() => new GetOrderBooksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOrderBooksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderBooksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderBooksRequest(GetOrderBooksRequest other) : this() {
      market_ = other.market_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderBooksRequest Clone() {
      return new GetOrderBooksRequest(this);
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Type.Market> _repeated_market_codec
        = pb::FieldCodec.ForMessage(10, global::Ssigmaapi.Type.Market.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Type.Market> market_ = new pbc::RepeatedField<global::Ssigmaapi.Type.Market>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Type.Market> Market {
      get { return market_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOrderBooksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOrderBooksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!market_.Equals(other.market_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= market_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      market_.WriteTo(output, _repeated_market_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += market_.CalculateSize(_repeated_market_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOrderBooksRequest other) {
      if (other == null) {
        return;
      }
      market_.Add(other.market_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            market_.AddEntriesFrom(input, _repeated_market_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOrderBooksResponse : pb::IMessage<GetOrderBooksResponse> {
    private static readonly pb::MessageParser<GetOrderBooksResponse> _parser = new pb::MessageParser<GetOrderBooksResponse>(() => new GetOrderBooksResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOrderBooksResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderBooksResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderBooksResponse(GetOrderBooksResponse other) : this() {
      all_ = other.all_.Clone();
      timestamp_ = other.timestamp_;
      exchangeStatus_ = other.exchangeStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderBooksResponse Clone() {
      return new GetOrderBooksResponse(this);
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Type.OrderBook> _repeated_all_codec
        = pb::FieldCodec.ForMessage(10, global::Ssigmaapi.Type.OrderBook.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Type.OrderBook> all_ = new pbc::RepeatedField<global::Ssigmaapi.Type.OrderBook>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Type.OrderBook> All {
      get { return all_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "exchange_status" field.</summary>
    public const int ExchangeStatusFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Markethub.V1.ExchangeStatus> _repeated_exchangeStatus_codec
        = pb::FieldCodec.ForMessage(26, global::Ssigmaapi.Markethub.V1.ExchangeStatus.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus> exchangeStatus_ = new pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus> ExchangeStatus {
      get { return exchangeStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOrderBooksResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOrderBooksResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!all_.Equals(other.all_)) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!exchangeStatus_.Equals(other.exchangeStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= all_.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= exchangeStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      all_.WriteTo(output, _repeated_all_codec);
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      exchangeStatus_.WriteTo(output, _repeated_exchangeStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += all_.CalculateSize(_repeated_all_codec);
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += exchangeStatus_.CalculateSize(_repeated_exchangeStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOrderBooksResponse other) {
      if (other == null) {
        return;
      }
      all_.Add(other.all_);
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      exchangeStatus_.Add(other.exchangeStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            all_.AddEntriesFrom(input, _repeated_all_codec);
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            exchangeStatus_.AddEntriesFrom(input, _repeated_exchangeStatus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTradesAndOrderBooksRequest : pb::IMessage<GetTradesAndOrderBooksRequest> {
    private static readonly pb::MessageParser<GetTradesAndOrderBooksRequest> _parser = new pb::MessageParser<GetTradesAndOrderBooksRequest>(() => new GetTradesAndOrderBooksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTradesAndOrderBooksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesAndOrderBooksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesAndOrderBooksRequest(GetTradesAndOrderBooksRequest other) : this() {
      tradesReq_ = other.tradesReq_ != null ? other.tradesReq_.Clone() : null;
      orderbooksReq_ = other.orderbooksReq_ != null ? other.orderbooksReq_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesAndOrderBooksRequest Clone() {
      return new GetTradesAndOrderBooksRequest(this);
    }

    /// <summary>Field number for the "trades_req" field.</summary>
    public const int TradesReqFieldNumber = 1;
    private global::Ssigmaapi.Markethub.V1.GetTradesRequest tradesReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Markethub.V1.GetTradesRequest TradesReq {
      get { return tradesReq_; }
      set {
        tradesReq_ = value;
      }
    }

    /// <summary>Field number for the "orderbooks_req" field.</summary>
    public const int OrderbooksReqFieldNumber = 2;
    private global::Ssigmaapi.Markethub.V1.GetOrderBooksRequest orderbooksReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Markethub.V1.GetOrderBooksRequest OrderbooksReq {
      get { return orderbooksReq_; }
      set {
        orderbooksReq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTradesAndOrderBooksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTradesAndOrderBooksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TradesReq, other.TradesReq)) return false;
      if (!object.Equals(OrderbooksReq, other.OrderbooksReq)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tradesReq_ != null) hash ^= TradesReq.GetHashCode();
      if (orderbooksReq_ != null) hash ^= OrderbooksReq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tradesReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TradesReq);
      }
      if (orderbooksReq_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OrderbooksReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tradesReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradesReq);
      }
      if (orderbooksReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderbooksReq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTradesAndOrderBooksRequest other) {
      if (other == null) {
        return;
      }
      if (other.tradesReq_ != null) {
        if (tradesReq_ == null) {
          tradesReq_ = new global::Ssigmaapi.Markethub.V1.GetTradesRequest();
        }
        TradesReq.MergeFrom(other.TradesReq);
      }
      if (other.orderbooksReq_ != null) {
        if (orderbooksReq_ == null) {
          orderbooksReq_ = new global::Ssigmaapi.Markethub.V1.GetOrderBooksRequest();
        }
        OrderbooksReq.MergeFrom(other.OrderbooksReq);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tradesReq_ == null) {
              tradesReq_ = new global::Ssigmaapi.Markethub.V1.GetTradesRequest();
            }
            input.ReadMessage(tradesReq_);
            break;
          }
          case 18: {
            if (orderbooksReq_ == null) {
              orderbooksReq_ = new global::Ssigmaapi.Markethub.V1.GetOrderBooksRequest();
            }
            input.ReadMessage(orderbooksReq_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTradesAndOrderBooksResponse : pb::IMessage<GetTradesAndOrderBooksResponse> {
    private static readonly pb::MessageParser<GetTradesAndOrderBooksResponse> _parser = new pb::MessageParser<GetTradesAndOrderBooksResponse>(() => new GetTradesAndOrderBooksResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTradesAndOrderBooksResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesAndOrderBooksResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesAndOrderBooksResponse(GetTradesAndOrderBooksResponse other) : this() {
      tradesRes_ = other.tradesRes_ != null ? other.tradesRes_.Clone() : null;
      orderbooksRes_ = other.orderbooksRes_ != null ? other.orderbooksRes_.Clone() : null;
      exchangeStatus_ = other.exchangeStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTradesAndOrderBooksResponse Clone() {
      return new GetTradesAndOrderBooksResponse(this);
    }

    /// <summary>Field number for the "trades_res" field.</summary>
    public const int TradesResFieldNumber = 1;
    private global::Ssigmaapi.Markethub.V1.GetTradesResponse tradesRes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Markethub.V1.GetTradesResponse TradesRes {
      get { return tradesRes_; }
      set {
        tradesRes_ = value;
      }
    }

    /// <summary>Field number for the "orderbooks_res" field.</summary>
    public const int OrderbooksResFieldNumber = 2;
    private global::Ssigmaapi.Markethub.V1.GetOrderBooksResponse orderbooksRes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Markethub.V1.GetOrderBooksResponse OrderbooksRes {
      get { return orderbooksRes_; }
      set {
        orderbooksRes_ = value;
      }
    }

    /// <summary>Field number for the "exchange_status" field.</summary>
    public const int ExchangeStatusFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Markethub.V1.ExchangeStatus> _repeated_exchangeStatus_codec
        = pb::FieldCodec.ForMessage(26, global::Ssigmaapi.Markethub.V1.ExchangeStatus.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus> exchangeStatus_ = new pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.ExchangeStatus> ExchangeStatus {
      get { return exchangeStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTradesAndOrderBooksResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTradesAndOrderBooksResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TradesRes, other.TradesRes)) return false;
      if (!object.Equals(OrderbooksRes, other.OrderbooksRes)) return false;
      if(!exchangeStatus_.Equals(other.exchangeStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tradesRes_ != null) hash ^= TradesRes.GetHashCode();
      if (orderbooksRes_ != null) hash ^= OrderbooksRes.GetHashCode();
      hash ^= exchangeStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tradesRes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TradesRes);
      }
      if (orderbooksRes_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OrderbooksRes);
      }
      exchangeStatus_.WriteTo(output, _repeated_exchangeStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tradesRes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradesRes);
      }
      if (orderbooksRes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderbooksRes);
      }
      size += exchangeStatus_.CalculateSize(_repeated_exchangeStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTradesAndOrderBooksResponse other) {
      if (other == null) {
        return;
      }
      if (other.tradesRes_ != null) {
        if (tradesRes_ == null) {
          tradesRes_ = new global::Ssigmaapi.Markethub.V1.GetTradesResponse();
        }
        TradesRes.MergeFrom(other.TradesRes);
      }
      if (other.orderbooksRes_ != null) {
        if (orderbooksRes_ == null) {
          orderbooksRes_ = new global::Ssigmaapi.Markethub.V1.GetOrderBooksResponse();
        }
        OrderbooksRes.MergeFrom(other.OrderbooksRes);
      }
      exchangeStatus_.Add(other.exchangeStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tradesRes_ == null) {
              tradesRes_ = new global::Ssigmaapi.Markethub.V1.GetTradesResponse();
            }
            input.ReadMessage(tradesRes_);
            break;
          }
          case 18: {
            if (orderbooksRes_ == null) {
              orderbooksRes_ = new global::Ssigmaapi.Markethub.V1.GetOrderBooksResponse();
            }
            input.ReadMessage(orderbooksRes_);
            break;
          }
          case 26: {
            exchangeStatus_.AddEntriesFrom(input, _repeated_exchangeStatus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TradeWithAdditionalInfo : pb::IMessage<TradeWithAdditionalInfo> {
    private static readonly pb::MessageParser<TradeWithAdditionalInfo> _parser = new pb::MessageParser<TradeWithAdditionalInfo>(() => new TradeWithAdditionalInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeWithAdditionalInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeWithAdditionalInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeWithAdditionalInfo(TradeWithAdditionalInfo other) : this() {
      trade_ = other.trade_ != null ? other.trade_.Clone() : null;
      velocity_ = other.velocity_;
      acceleration_ = other.acceleration_;
      volatility_ = other.volatility_;
      volumeBase_ = other.volumeBase_;
      volumeQuote_ = other.volumeQuote_;
      momentumRate_ = other.momentumRate_;
      velocityWindowingSize_ = other.velocityWindowingSize_;
      volatilityWindowingSize_ = other.volatilityWindowingSize_;
      volumeWindowingSize_ = other.volumeWindowingSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeWithAdditionalInfo Clone() {
      return new TradeWithAdditionalInfo(this);
    }

    /// <summary>Field number for the "trade" field.</summary>
    public const int TradeFieldNumber = 1;
    private global::Ssigmaapi.Type.Trade trade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Type.Trade Trade {
      get { return trade_; }
      set {
        trade_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private double velocity_;
    /// <summary>
    /// 時間あたりの価格変化の移動平均
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 3;
    private double acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "volatility" field.</summary>
    public const int VolatilityFieldNumber = 4;
    private double volatility_;
    /// <summary>
    /// 時間あたりの最大価格差
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volatility {
      get { return volatility_; }
      set {
        volatility_ = value;
      }
    }

    /// <summary>Field number for the "volume_base" field.</summary>
    public const int VolumeBaseFieldNumber = 5;
    private double volumeBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VolumeBase {
      get { return volumeBase_; }
      set {
        volumeBase_ = value;
      }
    }

    /// <summary>Field number for the "volume_quote" field.</summary>
    public const int VolumeQuoteFieldNumber = 6;
    private double volumeQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VolumeQuote {
      get { return volumeQuote_; }
      set {
        volumeQuote_ = value;
      }
    }

    /// <summary>Field number for the "momentum_rate" field.</summary>
    public const int MomentumRateFieldNumber = 7;
    private double momentumRate_;
    /// <summary>
    /// 時間あたりの(buy_volume - sell_volume)/volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MomentumRate {
      get { return momentumRate_; }
      set {
        momentumRate_ = value;
      }
    }

    /// <summary>Field number for the "velocity_windowing_size" field.</summary>
    public const int VelocityWindowingSizeFieldNumber = 8;
    private long velocityWindowingSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VelocityWindowingSize {
      get { return velocityWindowingSize_; }
      set {
        velocityWindowingSize_ = value;
      }
    }

    /// <summary>Field number for the "volatility_windowing_size" field.</summary>
    public const int VolatilityWindowingSizeFieldNumber = 9;
    private long volatilityWindowingSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VolatilityWindowingSize {
      get { return volatilityWindowingSize_; }
      set {
        volatilityWindowingSize_ = value;
      }
    }

    /// <summary>Field number for the "volume_windowing_size" field.</summary>
    public const int VolumeWindowingSizeFieldNumber = 10;
    private long volumeWindowingSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VolumeWindowingSize {
      get { return volumeWindowingSize_; }
      set {
        volumeWindowingSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeWithAdditionalInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeWithAdditionalInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Trade, other.Trade)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Velocity, other.Velocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Acceleration, other.Acceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volatility, other.Volatility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolumeBase, other.VolumeBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolumeQuote, other.VolumeQuote)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MomentumRate, other.MomentumRate)) return false;
      if (VelocityWindowingSize != other.VelocityWindowingSize) return false;
      if (VolatilityWindowingSize != other.VolatilityWindowingSize) return false;
      if (VolumeWindowingSize != other.VolumeWindowingSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (trade_ != null) hash ^= Trade.GetHashCode();
      if (Velocity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Velocity);
      if (Acceleration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Acceleration);
      if (Volatility != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volatility);
      if (VolumeBase != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolumeBase);
      if (VolumeQuote != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolumeQuote);
      if (MomentumRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MomentumRate);
      if (VelocityWindowingSize != 0L) hash ^= VelocityWindowingSize.GetHashCode();
      if (VolatilityWindowingSize != 0L) hash ^= VolatilityWindowingSize.GetHashCode();
      if (VolumeWindowingSize != 0L) hash ^= VolumeWindowingSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trade_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Trade);
      }
      if (Velocity != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Velocity);
      }
      if (Acceleration != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Acceleration);
      }
      if (Volatility != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Volatility);
      }
      if (VolumeBase != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(VolumeBase);
      }
      if (VolumeQuote != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(VolumeQuote);
      }
      if (MomentumRate != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MomentumRate);
      }
      if (VelocityWindowingSize != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(VelocityWindowingSize);
      }
      if (VolatilityWindowingSize != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(VolatilityWindowingSize);
      }
      if (VolumeWindowingSize != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(VolumeWindowingSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trade_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trade);
      }
      if (Velocity != 0D) {
        size += 1 + 8;
      }
      if (Acceleration != 0D) {
        size += 1 + 8;
      }
      if (Volatility != 0D) {
        size += 1 + 8;
      }
      if (VolumeBase != 0D) {
        size += 1 + 8;
      }
      if (VolumeQuote != 0D) {
        size += 1 + 8;
      }
      if (MomentumRate != 0D) {
        size += 1 + 8;
      }
      if (VelocityWindowingSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VelocityWindowingSize);
      }
      if (VolatilityWindowingSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VolatilityWindowingSize);
      }
      if (VolumeWindowingSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VolumeWindowingSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeWithAdditionalInfo other) {
      if (other == null) {
        return;
      }
      if (other.trade_ != null) {
        if (trade_ == null) {
          trade_ = new global::Ssigmaapi.Type.Trade();
        }
        Trade.MergeFrom(other.Trade);
      }
      if (other.Velocity != 0D) {
        Velocity = other.Velocity;
      }
      if (other.Acceleration != 0D) {
        Acceleration = other.Acceleration;
      }
      if (other.Volatility != 0D) {
        Volatility = other.Volatility;
      }
      if (other.VolumeBase != 0D) {
        VolumeBase = other.VolumeBase;
      }
      if (other.VolumeQuote != 0D) {
        VolumeQuote = other.VolumeQuote;
      }
      if (other.MomentumRate != 0D) {
        MomentumRate = other.MomentumRate;
      }
      if (other.VelocityWindowingSize != 0L) {
        VelocityWindowingSize = other.VelocityWindowingSize;
      }
      if (other.VolatilityWindowingSize != 0L) {
        VolatilityWindowingSize = other.VolatilityWindowingSize;
      }
      if (other.VolumeWindowingSize != 0L) {
        VolumeWindowingSize = other.VolumeWindowingSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (trade_ == null) {
              trade_ = new global::Ssigmaapi.Type.Trade();
            }
            input.ReadMessage(trade_);
            break;
          }
          case 17: {
            Velocity = input.ReadDouble();
            break;
          }
          case 25: {
            Acceleration = input.ReadDouble();
            break;
          }
          case 33: {
            Volatility = input.ReadDouble();
            break;
          }
          case 41: {
            VolumeBase = input.ReadDouble();
            break;
          }
          case 49: {
            VolumeQuote = input.ReadDouble();
            break;
          }
          case 57: {
            MomentumRate = input.ReadDouble();
            break;
          }
          case 64: {
            VelocityWindowingSize = input.ReadInt64();
            break;
          }
          case 72: {
            VolatilityWindowingSize = input.ReadInt64();
            break;
          }
          case 80: {
            VolumeWindowingSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TradesWithMarket : pb::IMessage<TradesWithMarket> {
    private static readonly pb::MessageParser<TradesWithMarket> _parser = new pb::MessageParser<TradesWithMarket>(() => new TradesWithMarket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradesWithMarket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradesWithMarket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradesWithMarket(TradesWithMarket other) : this() {
      market_ = other.market_ != null ? other.market_.Clone() : null;
      trades_ = other.trades_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradesWithMarket Clone() {
      return new TradesWithMarket(this);
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 1;
    private global::Ssigmaapi.Type.Market market_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Type.Market Market {
      get { return market_; }
      set {
        market_ = value;
      }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Markethub.V1.TradeWithAdditionalInfo> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(18, global::Ssigmaapi.Markethub.V1.TradeWithAdditionalInfo.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.TradeWithAdditionalInfo> trades_ = new pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.TradeWithAdditionalInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Markethub.V1.TradeWithAdditionalInfo> Trades {
      get { return trades_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradesWithMarket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradesWithMarket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Market, other.Market)) return false;
      if(!trades_.Equals(other.trades_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (market_ != null) hash ^= Market.GetHashCode();
      hash ^= trades_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (market_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Market);
      }
      trades_.WriteTo(output, _repeated_trades_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (market_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Market);
      }
      size += trades_.CalculateSize(_repeated_trades_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradesWithMarket other) {
      if (other == null) {
        return;
      }
      if (other.market_ != null) {
        if (market_ == null) {
          market_ = new global::Ssigmaapi.Type.Market();
        }
        Market.MergeFrom(other.Market);
      }
      trades_.Add(other.trades_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (market_ == null) {
              market_ = new global::Ssigmaapi.Type.Market();
            }
            input.ReadMessage(market_);
            break;
          }
          case 18: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExchangeStatus : pb::IMessage<ExchangeStatus> {
    private static readonly pb::MessageParser<ExchangeStatus> _parser = new pb::MessageParser<ExchangeStatus>(() => new ExchangeStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Markethub.V1.MarkethubReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeStatus(ExchangeStatus other) : this() {
      exchange_ = other.exchange_;
      open_ = other.open_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeStatus Clone() {
      return new ExchangeStatus(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private bool open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if (Open != other.Open) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (Open != false) hash ^= Open.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      if (Open != false) {
        output.WriteRawTag(16);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (Open != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeStatus other) {
      if (other == null) {
        return;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 16: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
