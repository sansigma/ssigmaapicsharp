// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ssigmaapi/pashiriwebsocket/v1/pashiriwebsocket.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ssigmaapi.Pashiriwebsocket.V1 {
  public static partial class PashiriWebsocketServiceV1
  {
    static readonly string __ServiceName = "ssigmaapi.pashiriwebsocket.v1.PashiriWebsocketServiceV1";

    static readonly grpc::Marshaller<global::Ssigmaapi.Type.Market> __Marshaller_ssigmaapi_type_Market = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ssigmaapi.Type.Market.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Ssigmaapi.Type.Trades> __Marshaller_ssigmaapi_type_Trades = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ssigmaapi.Type.Trades.Parser.ParseFrom);

    static readonly grpc::Method<global::Ssigmaapi.Type.Market, global::Ssigmaapi.Type.Trades> __Method_GetTrades = new grpc::Method<global::Ssigmaapi.Type.Market, global::Ssigmaapi.Type.Trades>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTrades",
        __Marshaller_ssigmaapi_type_Market,
        __Marshaller_ssigmaapi_type_Trades);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ssigmaapi.Pashiriwebsocket.V1.PashiriwebsocketReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PashiriWebsocketServiceV1</summary>
    public abstract partial class PashiriWebsocketServiceV1Base
    {
      public virtual global::System.Threading.Tasks.Task GetTrades(global::Ssigmaapi.Type.Market request, grpc::IServerStreamWriter<global::Ssigmaapi.Type.Trades> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PashiriWebsocketServiceV1</summary>
    public partial class PashiriWebsocketServiceV1Client : grpc::ClientBase<PashiriWebsocketServiceV1Client>
    {
      /// <summary>Creates a new client for PashiriWebsocketServiceV1</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PashiriWebsocketServiceV1Client(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PashiriWebsocketServiceV1 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PashiriWebsocketServiceV1Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PashiriWebsocketServiceV1Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PashiriWebsocketServiceV1Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Ssigmaapi.Type.Trades> GetTrades(global::Ssigmaapi.Type.Market request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrades(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Ssigmaapi.Type.Trades> GetTrades(global::Ssigmaapi.Type.Market request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTrades, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PashiriWebsocketServiceV1Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new PashiriWebsocketServiceV1Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PashiriWebsocketServiceV1Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTrades, serviceImpl.GetTrades).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PashiriWebsocketServiceV1Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTrades, serviceImpl.GetTrades);
    }

  }
}
#endregion
